{
	"extensionName": "디지털몽키 Extension",
	"description": "디지털 몽키의 전용 모듈을 위한 확장",
	"version": "1.2.2",
	"author": "송도중 SoftIce BetaMan강민수(skymin0417@gmail.com)",
	"homepage": "https://github.com/skymins04",
	"sort":0,
	"javascriptURL":"js/demo.js",
  "firmware":"1.0",
  "extensionPort":0,
	"blockSpecs": [
		[
			"h",
			"RGB LED 모듈 블럭들",
			"RGBledHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //RGB LED 모듈
			"w",
			"RGB LED: RGB LED %n 번 디지털 R %d.digital 번 G %d.digital 번 B %d.digital 핀으로 정하기",
			"RGBledBegin",
			"1",
			"4",
			"5",
			"6",
			{
				"setup":"",
				"inc":"#include \"RGBled.h\"\n",
				"def":"RGBled RGBled_{0}({1},{2},{3});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"RGB LED: RGB LED %n 번 R %n 번 G %n 번 B %n 으로 켜기",
			"setRGBlight",
			"1",
			"0",
			"0",
			"0",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"RGBled_{0}.setRGB({1},{2},{3});\n",
				"loop":""
			}
		],
		[
			"h",
			"신호등 LED 모듈 블럭들",
			"TrafficLightledHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //신호등 LED 모듈
			"w",
			"신호등: 신호등 %n 번 디지털 빨간색 %d.digital 번 노란색 %d.digital 번 초록색 %d.digital 핀으로 정하기",
			"TrafficLightBegin",
			"1",
			"4",
			"5",
			"6",
			{
				"setup":"",
				"inc":"#include \"TrafficLight.h\"\n",
				"def":"TrafficLight traffic_{0}({1},{2},{3});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"신호등: 신호등 %n 번 %d.traffic  %n 밀리초 동안 켜기",
			"turnOnLED",
			"1",
			"빨간색",
			"500",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"traffic_{0}.turnOn({1},{2});\n",
				"loop":""
			}
		],
		[
			"w",
			"신호등: 신호등 %n 번 %d.traffic  %n 밀리초 동안 끄기",
			"turnOffLED",
			"1",
			"빨간색",
			"0",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"traffic_{0}.turnOff({1},{2});\n",
				"loop":""
			}
		],
		[
			"w",
			"신호등: 신호등 %n 번 %d.traffic 끄고 %d.traffic  %n 밀리초 동안 켜기",
			"OFFnON",
			"1",
			"빨간색",
			"초록색",
			"500",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"traffic_{0}.OFFnON({1},{2},{3});\n",
				"loop":""
			}
		],
		[
			"h",
			"온도센서 모듈 블럭들",
			"TemperSenHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[//LM35 temperature sensor
			"w",
			"온도센서: 온도센서 %n 번 아날로그 %d.analog 핀으로 정하기",
			"LM35begin",
			"1",
			"0",
			{
				"setup":"",
				"inc":"#include \"TemperSen.h\"\n",
				"def":"TemperSen TemperSen_{0}({1});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"r",
			"온도센서: 온도센서 %n 번 읽기",
			"LM35read",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"TemperSen_{0}.getTemper()",
				"loop":""
			}
		],
		[
			"h",
			"온습도센서 모듈 블럭들",
			"TEMPnHUMSenHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"r",
			"온습도센서: 온습도센서에서 온도 읽기",
			"TnHreadT",
			{
				"setup":"tempNhum.begin();\n",
				"inc":"#include \"Adafruit_Si7021.h\"\n",
				"def":"Adafruit_Si7021 tempNhum = Adafruit_Si7021();\n",
				"work":"tempNhum.readTemperature()",
				"loop":""
			}
		],
		[
			"r",
			"온습도센서: 온습도센서에서 습도 읽기",
			"TnHreadH",
			{
				"setup":"tempNhum.begin();\n",
				"inc":"#include \"Adafruit_Si7021.h\"\n",
				"def":"Adafruit_Si7021 tempNhum = Adafruit_Si7021();\n",
				"work":"tempNhum.readHumidity()",
				"loop":""
			}
		],
		[
			"h",
			"나침반센서 모듈 블럭들",
			"compassHead",
			{
				"setup":"",
				"inc":"",
				"def":""	,
				"work":"",
				"loop":""
			}
		],
		[
			"r",
			"나침반센서: 나침반센서의 가속도계 %d.axis 축 읽기",
			"readCompassAccel",
			"X",
			{
				"setup":"",
				"inc":"#include \"compassSen.h\"\n",
				"def":"compassSen compass;\n",
				"work":"compass.readAccel({0})",
				"loop":""
			}
		],
		[
			"r",
			"나침반센서: 나침반센서의 자력계 %d.axis 축 읽기",
			"readCompassMag",
			"X",
			{
				"setup":"",
				"inc":"#include \"compassSen.h\"\n",
				"def":"compassSen compass;\n",
				"work":"compass.readMag({0})",
				"loop":""
			}
		],
		[
			"h",
			"RTC 모듈 블럭들",
			"RTCHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"RTC: RTC 현재 시간과 날짜로 초기화하기",
			"setRTC",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.setRTC();",
				"loop":""
			}
		],
		[
			"r",
			"RTC: RTC 시간 읽기",
			"RTCreadTime",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.readTime()",
				"loop":""
			}
		],
		[
			"r",
			"RTC: RTC 날짜 읽기",
			"RTCreadDate",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.readDate()",
				"loop":""
			}
		],
		[
			"h",
			"DC 모터드라이버 모듈 블럭들",
			"TrafficLightledHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //L9110S DC 모터드라이버
			"w",
			"DC모터: DC모터 %n 번 디지털 A %d.digital B %d.digital 핀으로 정하기",
			"DCmotorBegin",
			"1",
			"6",
			"7",
			{
				"setup":"",
				"inc":"#include \"DCmotor.h\"\n",
				"def":"DCmotor DCmotor_{0}({1},{2});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"DC모터: DC모터 %n 번 속도 %n 으로 %d.direction 돌리기",
			"turnDCmotor",
			"1",
			"150",
			"시계방향으로",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"DCmotor_{0}.turnMotor({2},{1});\n",
				"loop":""
			}
		],
		[
			"w",
			"DC모터: DC모터 %n 번 멈추기",
			"stopDCmotor",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"DCmotor_{0}.stopMotor();\n",
				"loop":""
			}
		],
		[
			"h",
			"IR 송수신 모듈 블럭들",
			"IRHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"IR 송신: IR 송신 %n 보네기",
			"sendIRsend",
			" ",
			{
				"setup":"",
				"inc":"#include \"IR.h\"\n",
				"def":"IRsend irsend;",
				"work":"irsend.sendSony({0}, 12);\n",
				"loop":""
			}
		],
		[
			"w",
			"IR 수신: IR 수신 %n 번 디지털 %d.digital 핀으로 정하기",
			"beginIRrecv",
			"1",
			"2",
			{
				"setup":"irrecv_{0}.enableIRIn();\n",
				"inc":"#include \"IR.h\"\n",
				"def":"IRrecv irrecv_{0}({1});\ndecode_results results_{0};\n",
				"work":"",
				"loop":""
			}
		],
		[
			"b",
			"IR 수신: IR 수신 %n 번에 값이 들어왔는가?",
			"checkIRrecv",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"irrecv_{0}.decode(&results_{0})",
				"loop":""
			}
		],
		[
			"r",
			"IR 수신: IR 수신 %n 번 읽기",
			"readIRrecv",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"results_{0}.value",
				"loop":""
			}
		],
		[
			"w",
			"IR 수신: IR 수신 %n 번 재시작하기",
			"resumeIRrecv",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"irrecv_{0}.resume();\n",
				"loop":""
			}
		],
		[
			"h",
			"LCD 모듈 블럭들",
			"LCDHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //LCD I2C 인터페이스
			"w",
			"LCD: LCD %n 번 정하기, 주소: %d.addr",
			"LCDBegin",
			"1",
			"0x27",
			{
				"setup":"lcd_{0}.init();\nlcd_{0}.backlight();\n",
				"inc":"#include \"LiquidCrystal_I2C.h\"\n",
				"def":"LiquidCrystal_I2C lcd_{0}({1},16,2);\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"LCD: LCD %n 번 %s 출력하기, %d.line 번째 줄, %d.col 번째 칸",
			"LCDPrint",
			"1",
			"Hello World!",
			"0",
			"0",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"lcd_{0}.setCursor({3},{2});\nlcd_{0}.print({1});\n",
				"loop":""
			}
		],
		[
			"w",
			"LCD: LCD %n 번 지우기",
			"LCDClear",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"lcd_{0}.clear();\n",
				"loop":""
			}
		],
		[
			"h",
			"FND 모듈 블럭들",
			"FNDHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //TM1637 FND 모듈
			"w",
			"FND: FND %n 번 디지털 CLK %d.digital DIO %d.digital 핀으로 정하기",
			"FNDBegin",
			"1",
			"7",
			"6",
			{
				"setup": "fnd_{0}.setBrightness(3);\n",
				"inc": "#include \"TM1637Display.h\"\n",
				"def":"TM1637Display fnd_{0}({1},{2});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"FND: FND %n 번 %d.brightness 단계로 밝기 설정하기",
			"setBrightness",
			"1",
			"3",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"fnd_{0}.setBrightness({1});\n",
				"loop":""
			}
		],
		[
			"w",
			"FND: FND %n 번 전원 %d.power",
			"setPower",
			"1",
			"켜기",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"fnd_{0}.setBrightness(5, {1});\n",
				"loop":""
			}
		],
		[
			"w",
			"FND: FND %n 번 %n 출력하기, 옵션: 빈공간 0 채우기 %d.power, %n 밀리초 기다리기",
			"printNumber",
			"1",
			"2018",
			"끄기",
			"500",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"fnd_{0}.showNumberDec({1},{2});\ndelay({3});\n",
				"loop":""
			}
		],
		[
			"h",
			"블루투스 모듈 블럭들",
			"BTHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"BT: BT %n 번 디지털 TX %d.digital RX %d.digital 핀으로 정하기",
			"BTbegin",
			"1",
			"2",
			"3",
			{
				"setup":"bt_{0}.begin(9600);\n",
				"inc":"",
				"def":"SoftwareSerial bt_{0}({1},{2});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"b",
			"BT: BT %n 번에 데이터가 들어왔는가?",
			"BTavailable",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"bt_{0}.available()",
				"loop":""
			}
		],
		[
			"r",
			"BT: BT %n 번의 데이터를 문자열로 읽기",
			"BTreadString",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"String readBTstring() {String read; while(bt_{0}.available()) {read += (char)bt_{0}.read();} return read;}\n",
				"work":"readBTstring()",
				"loop":""
			}
		],
		[
			"r",
			"BT: BT %n 번의 데이터를 정수로 읽기",
			"BTreadInt",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"String readBTstring() {String read; while(bt_{0}.available()) {read += (char)bt_{0}.read();} return read;}\nint readBTint() {String readData = readBTstring(); char buff[15]; readData.toCharArray(buff,readData.length()+1); int converted = atoi(buff); return converted;}\n",
				"work":"readBTint()",
				"loop":""
			}
		],
		[
			"r",
			"BT: BT %n 번의 데이터를 실수로 읽기",
			"BTreadFloat",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"String readBTstring() {String read; while(bt_{0}.available()) {read += (char)bt_{0}.read();} return read;}\nfloat readBTfloat(){String readData = readBTstring(); return readData.toFloat();}\n",
				"work":"readBTfloat()",
				"loop":""
			}
		],
		[
			"h",
			"기타 유용한 블럭들",
			"EtcHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"r",
			"맵핑: 맵핑할 값 %n , 맵핑할 값의 범위 %n ~ %n 결과값의 범위 %n ~ %n",
			"mapping",
			" ",
			"0",
			"1023",
			"0",
			"180",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"map({0},{1},{2},{3},{4})",
				"loop":""
			}
		]
	],
	"menus": {
		"addr":["0x20","0x27","0x3f"],
		"line":[0,1],
		"col":[0,1,2,4,6,7,8,9,10,11,12,13,14,15],
		"digital":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],
		"analog":[0,1,2,3,4,5,6,7],
		"power":["끄기","켜기"],
		"brightness":[1,2,3,4,5],
		"traffic":["빨간색","노란색","초록색"],
		"direction":["시계방향으로","반시계방향으로"],
		"axis":["X","Y","Z"]
	},
	"values":{
		"0x20": 0x20,
		"0x27": 0x27,
		"0x3f": 0x3f,
		"끄기": 0,
		"켜기": 1,
		"빨간색": 0,
		"노란색": 1,
		"초록색": 2,
		"시계방향으로": 0,
		"반시계방향으로": 1,
		"X": 0,
		"Y": 1,
		"Z": 2
	},
	"translators":{
		"zh_CN":{
			"Demo Program":"演示程序",
			"HIGH":"高电平",
			"LOW":"低电平",
			"digitalWrite( %n , %d.digital )":"数字口输出( %n ,%d.digital )",
      "blink":"闪烁"
		}
	}
}
