{	"extensionName": "디지털몽키 Extension",
	"description": "디지털 몽키의 전용 모듈을 위한 확장",
	"version": "1.2.10",
	"author": "송도중 SoftIce BetaMan강민수(skymin0417@gmail.com)",
	"homepage": "https://github.com/skymins04",
	"sort":0,
	"javascriptURL":"js/DigitalMonkey.js",
  "firmware":"1.0",
  "extensionPort":0,
	"blockSpecs": [
		["h","Arduino Program","runArduino"],
		["B", "read digital pin %n","getDigital","9",
		{"encode":"{d0}","setup":"pinMode({0},INPUT);\n","inc":"","def":"","work":"digitalRead({0})","loop":""}],
		["R", "read analog pin (A)%n","getAnalog","0",
		{"encode":"{d0}","setup":"pinMode(A0+{0},INPUT);\n","inc":"","def":"","work":"analogRead(A0+{0})","loop":""}],
		["R", "read pulse pin %n timeout %n","getPulse","13",20000,
		{"encode":"{d0}","setup":"pinMode({0},INPUT);\n","inc":"","def":"","work":"pulseIn({0},HIGH,{1})","loop":""}],
		["R", "read ultrasonic sensor trig pin %n echo pin %n","getUltrasonicArduino",13,12,
		{"encode":"{d0}","setup":"","inc":"","def":"--separator--float getDistance(int trig,int echo){\npinMode(trig,OUTPUT);\ndigitalWrite(trig,LOW);\ndelayMicroseconds(2);\ndigitalWrite(trig,HIGH);\ndelayMicroseconds(10);\ndigitalWrite(trig,LOW);\npinMode(echo, INPUT);\nreturn pulseIn(echo,HIGH,30000)/58.0;\n}\n","work":"getDistance({0},{1})","loop":""}],
		["-"],
		["w", "set digital pin %n output as %d.digital","runDigital", "9", "HIGH",
		{"encode":"{d0}{d1}","setup":"pinMode({0},OUTPUT);\n","inc":"","def":"","work":"digitalWrite({0},{1});\n","loop":""}],
		["w", "set pwm pin %n output as %d.pwmvalue","runPwm", "5", 0,
		{"encode":"{d0}{d1}","setup":"pinMode({0},OUTPUT);\n","inc":"","def":"","work":"analogWrite({0},{1});\n","loop":""}],
		["w", "play tone pin %n on note %d.notes beat %d.beats","runTone", "9", "C4","Half",
		{"encode":"{d0}{s1}{s2}","setup":"pinMode({0},OUTPUT);\n","inc":"","def":"","work":"tone({0},{1},{2}); // write to buzzer\ndelay({2});\n","loop":""}],
		["w", "set servo pin %n angle as %d.servovalue","runServoArduino", "9", 90,
		{"encode":"{d0}{d1}","setup":"servo_{0}.attach({0}); // init pin\n","inc":"#include <Servo.h>\n","def":"Servo servo_{0};\n","work":"servo_{0}.write({1}); // write to servo\n","loop":""}],
		["-"],
		["w", "serial write text %s", "serialWrite", "hello",
		{"setup":"Serial.begin(115200);\n","inc":"","def":"","work":"Serial.println({0});\n","loop":""}],
		["R", "serial available bytes", "serialAvailable",
		{"setup":"Serial.begin(115200);\n","inc":"","def":"","work":"Serial.available()","loop":""}],
		["R", "serial read byte", "serialRead",
		{"setup":"Serial.begin(115200);\n","inc":"","def":"","work":"Serial.read()","loop":""}],
		["-"],
		["R", "timer","getTimer", "0",
		{"encode":"{n0}","setup":"","inc":"","def":"double currentTime = 0;\ndouble lastTime = 0;\n--separator--double getLastTime(){\n\treturn currentTime = millis()/1000.0 - lastTime;\n}\n","work":"getLastTime()","loop":""}],
		["w", "reset timer","resetTimer", "0",
		{"encode":"{n0}","setup":"","inc":"","def":"double currentTime = 0;\ndouble lastTime = 0;\n","work":"lastTime = millis()/1000.0;\n","loop":""}],
		["----"],
		[
			"h",
			"RGB LED 모듈 블럭들",
			"RGBledHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //RGB LED 모듈
			"w",
			"RGB LED: RGB LED %n 번을 디지털 R %d.digitalPin 번 G %d.digitalPin 번 B %d.digitalPin 번 핀으로 정하기",
			"RGBledBegin",
			"1",
			"11",
			"10",
			"9",
			{
				"setup":"",
				"inc":"#include \"RGBled.h\"\n",
				"def":"RGBled RGBled_{0}({1},{2},{3});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"RGB LED: RGB LED %n 번을 R %n , G %n , B %n 으로 켜기",
			"setRGBlight",
			"1",
			"0",
			"0",
			"0",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"RGBled_{0}.setRGB({1},{2},{3});\n",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"신호등 LED 모듈 블럭들",
			"TrafficLightledHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //신호등 LED 모듈
			"w",
			"신호등: 신호등 %n 번을 디지털 빨간색 %d.digitalPin 번 노란색 %d.digitalPin 번 초록색 %d.digitalPin 번 핀으로 정하기",
			"TrafficLightBegin",
			"1",
			"4",
			"5",
			"6",
			{
				"setup":"",
				"inc":"#include \"TrafficLight.h\"\n",
				"def":"TrafficLight traffic_{0}({1},{2},{3});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"신호등: 신호등 %n 번의 %d.traffic 을 %n 밀리초 동안 켜기",
			"turnOnLED",
			"1",
			"빨간색",
			"500",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"traffic_{0}.turnOn({1},{2});\n",
				"loop":""
			}
		],
		[
			"w",
			"신호등: 신호등 %n 번의 %d.traffic 을 %n 밀리초 동안 끄기",
			"turnOffLED",
			"1",
			"빨간색",
			"0",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"traffic_{0}.turnOff({1},{2});\n",
				"loop":""
			}
		],
		[
			"w",
			"신호등: 신호등 %n 번의 %d.traffic 을 끄고 %d.traffic 을 %n 밀리초 동안 켜기",
			"OFFnON",
			"1",
			"빨간색",
			"초록색",
			"500",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"traffic_{0}.OFFnON({1},{2},{3});\n",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"온도센서 모듈 블럭들",
			"TemperSenHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[//LM35 temperature sensor
			"w",
			"온도센서: 온도센서 %n 번을 아날로그 %d.analog 번 핀으로 정하기",
			"LM35begin",
			"1",
			"0",
			{
				"setup":"",
				"inc":"#include \"TemperSen.h\"\n",
				"def":"TemperSen TemperSen_{0}({1});\n",
				"work":"",
				"loop":""
			}
		],
		["-"],
		[
			"r",
			"온도센서: 온도센서 %n 번 읽기",
			"LM35read",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"TemperSen_{0}.getTemper()",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"온습도센서 모듈 블럭들",
			"TEMPnHUMSenHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"r",
			"온습도센서: 온습도센서에서 온도 읽기",
			"TnHreadT",
			{
				"setup":"tempNhum.begin();\n",
				"inc":"#include \"Adafruit_Si7021.h\"\n",
				"def":"Adafruit_Si7021 tempNhum = Adafruit_Si7021();\n",
				"work":"tempNhum.readTemperature()",
				"loop":""
			}
		],
		[
			"r",
			"온습도센서: 온습도센서에서 습도 읽기",
			"TnHreadH",
			{
				"setup":"tempNhum.begin();\n",
				"inc":"#include \"Adafruit_Si7021.h\"\n",
				"def":"Adafruit_Si7021 tempNhum = Adafruit_Si7021();\n",
				"work":"tempNhum.readHumidity()",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"나침반센서 모듈 블럭들",
			"compassHead",
			{
				"setup":"",
				"inc":"",
				"def":""	,
				"work":"",
				"loop":""
			}
		],
		[
			"r",
			"나침반센서: 나침반센서의 가속도계의 %d.axis 축 읽기",
			"readCompassAccel",
			"X",
			{
				"setup":"",
				"inc":"#include \"compassSen.h\"\n",
				"def":"compassSen compass;\n",
				"work":"compass.readAccel({0})",
				"loop":""
			}
		],
		[
			"r",
			"나침반센서: 나침반센서의 자력계의 %d.axis 축 읽기",
			"readCompassMag",
			"X",
			{
				"setup":"",
				"inc":"#include \"compassSen.h\"\n",
				"def":"compassSen compass;\n",
				"work":"compass.readMag({0})",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"RTC 모듈 블럭들",
			"RTCHead",
			{
				"setup":"",
				"inc":"",
				"work":"",
				"def":"",
				"loop":""
			}
		],
		[
			"w",
			"RTC: RTC를 현재 시간과 날짜로 초기화하기",
			"setRTC",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.setRTC();",
				"loop":""
			}
		],
		["-"],
		[
			"r",
			"RTC: RTC의 시간 읽기",
			"RTCreadTime",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.readTime()",
				"loop":""
			}
		],
		[
			"r",
			"RTC: RTC의 시간중 %d.TimeField 만 읽기",
			"RTCreadTimeField",
			"시",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.readTimeField({0})",
				"loop":""
			}
		],
		[
			"r",
			"RTC: RTC의 날짜 읽기",
			"RTCreadDate",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.readDate()",
				"loop":""
			}
		],
		[
			"r",
			"RTC: RTC의 날짜중 %d.DateField 만 읽기",
			"RTCreadDateField",
			"년",
			{
				"setup":"",
				"inc":"#include \"dmonkeyRTC.h\"\n",
				"def":"dmonkeyRTC rtc;",
				"work":"rtc.readDateField({0})",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"DC 모터드라이버 모듈 블럭들",
			"TrafficLightledHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //L9110S DC 모터드라이버
			"w",
			"DC모터: DC모터 %n 번을 디지털 A %d.digitalPin 번 B %d.digitalPin 번 핀으로 정하기",
			"DCmotorBegin",
			"1",
			"11",
			"10",
			{
				"setup":"",
				"inc":"#include \"DCmotor.h\"\n",
				"def":"DCmotor DCmotor_{0}({1},{2});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"DC모터: DC모터 %n 번을 속도를 %n , 방향을 %d.direction 으로 돌리기",
			"turnDCmotor",
			"1",
			"150",
			"시계방향",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"DCmotor_{0}.turnMotor({2},{1});\n",
				"loop":""
			}
		],
		[
			"w",
			"DC모터: DC모터 %n 번을 멈추기",
			"stopDCmotor",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"DCmotor_{0}.stopMotor();\n",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"IR 송수신 모듈 블럭들",
			"IRHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"IR 송신: IR 송신모듈로 %n 보내기 (주의!!: IR 송신모듈은 디지털 3번에만 꽂아야 합니다)",
			"sendIRsend",
			" ",
			{
				"setup":"",
				"inc":"#include \"IR.h\"\n",
				"def":"IRsend irsend;",
				"work":"irsend.sendSony({0}, 12);\n",
				"loop":""
			}
		],
		[
			"w",
			"IR 수신: IR 수신 %n 번을 디지털 %d.digitalPin 번 핀으로 정하기",
			"beginIRrecv",
			"1",
			"2",
			{
				"setup":"irrecv_{0}.enableIRIn();\n",
				"inc":"#include \"IR.h\"\n",
				"def":"IRrecv irrecv_{0}({1});\ndecode_results results_{0};\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"IR 수신: IR 수신 %n 번을 재시작하기",
			"resumeIRrecv",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"irrecv_{0}.resume();\n",
				"loop":""
			}
		],
		["-"],
		[
			"b",
			"IR 수신: IR 수신 %n 번에 값이 들어왔는가?",
			"checkIRrecv",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"irrecv_{0}.decode(&results_{0})",
				"loop":""
			}
		],
		[
			"r",
			"IR 수신: IR 수신 %n 번 읽기",
			"readIRrecv",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"int16_t readIR(unsigned long read) {switch(read) {case 0xFFA25D: return 10;	break; case 0xFF629D: return 11; break;	case 0xFFE21D: return 12; break; case 0xFF22DD: return 20; break; case 0xFF02FD: return 21;	break; case 0xFFC23D: return 22; break; case 0xFFE01F: return 30; break; case 0xFFA857: return 31; break; case 0xFF906F: return 32; break; case 0xFF9867: return 100; break; case 0xFFB04F: return 200; break; case 0xFF6897: return 0; break; case 0xFF30CF: return 1; break; case 0xFF18E7: return 2; break; case 0xFF7A85: return 3; break; case 0xFF10EF: return 4; break; case 0xFF38C7: return 5; break; case 0xFF5AA5: return 6;	break; case 0xFF42BD: return 7;	break; case 0xFF4AB5: return 8; break; case 0xFF52AD: return 9; break; default: return -1; break;}}",
				"work":"readIR(results_{0}.value)",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"LCD 모듈 블럭들",
			"LCDHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //LCD I2C 인터페이스
			"w",
			"LCD: LCD %n 번을 주소 %d.addr 로 정하기",
			"LCDBegin",
			"1",
			"0x27",
			{
				"setup":"lcd_{0}.begin();\nlcd_{0}.backlight();\n",
				"inc":"#include \"LiquidCrystal_I2C.h\"\n",
				"def":"LiquidCrystal_I2C lcd_{0}({1},16,2);\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"LCD: LCD %n 번의 %d.line 번째 줄, %d.col 번째 칸에 %s 출력하기",
			"LCDPrint",
			"1",
			"0",
			"0",
			"Hello World!",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"lcd_{0}.setCursor({2},{1});\nlcd_{0}.print({3});\n",
				"loop":""
			}
		],
		[
			"w",
			"LCD: LCD %n 번 지우기",
			"LCDClear",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"lcd_{0}.clear();\n",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"FND 모듈 블럭들",
			"FNDHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[ //TM1637 FND 모듈
			"w",
			"FND: FND %n 번을 디지털 CLK %d.digitalPin 번 DIO %d.digitalPin 번 핀으로 정하기",
			"FNDBegin",
			"1",
			"7",
			"6",
			{
				"setup": "fnd_{0}.setBrightness(3);\n",
				"inc": "#include \"TM1637Display.h\"\n",
				"def":"TM1637Display fnd_{0}({1},{2});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"FND: FND %n 번의 밝기를 %d.brightness 단계로 설정하기",
			"setBrightness",
			"1",
			"3",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"fnd_{0}.setBrightness({1});\n",
				"loop":""
			}
		],
		[
			"w",
			"FND: FND %n 번의 전원을 %d.power",
			"setPower",
			"1",
			"켜기",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"fnd_{0}.setBrightness(5, {1});\n",
				"loop":""
			}
		],
		[
			"w",
			"FND: FND %n 번에 %n 출력하기, 옵션: 빈공간 0 채우기 %d.power , %n 밀리초 기다리기",
			"printNumber",
			"1",
			"2018",
			"끄기",
			"500",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"fnd_{0}.showNumberDec({1},{2});\ndelay({3});\n",
				"loop":""
			}
		],
		["--"],
		[
			"h",
			"블루투스 모듈 블럭들",
			"BTHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"BT: BT %n 번을 디지털 TX %d.digitalPin 번 RX %d.digitalPin 번 핀으로 정하기",
			"BTbegin",
			"1",
			"2",
			"3",
			{
				"setup":"bt_{0}.begin(9600);\n",
				"inc":"",
				"def":"SoftwareSerial bt_{0}({1},{2});\n",
				"work":"",
				"loop":""
			}
		],
		[
			"w",
			"BT: BT %n 번의 이름을 %s 비번을 %n 로 정하기 (주의!!: 4자리수이고 맨 앞자리가 0이 나오면 안됨)",
			"BTinit",
			"1",
			"HC-06",
			"1234",
			{
				"setup":"",
				"inc":"",
				"def":"boolean isAvailable() { unsigned long start = millis(), current = millis(); while(current - start < 1000) { if(bt_{0}.available()) return true; current = millis(); } return false; }\nvoid initialize(String Name, String PSWD) { bt_{0}.print(\"AT+NAME\"+Name); if(!isAvailable()) while(1); bt_{0}.print(\"AT+PIN\"+PSWD); if(!isAvailable()) while(1); }\n",
				"work":"initialize({1},String({2}));",
				"loop":""
			}
		],
		[
			"w",
			"BT: BT %n 번의 모드를 %d.BTmode 로 정하기",
			"BTsetMode",
			"1",
			"슬레이브",
			{
				"setup":"",
				"inc":"",
				"def":"void setMode(uint8_t mode){ switch(mode) { case 0: bt_{0}.print(\"AT+ROLE=S\"); break; case 1: bt_{0}.print(\"AT+ROLE=M\"); break; }}\n",
				"work":"setMode({1});",
				"loop":""
			}
		],
		[
			"w",
			"BT: BT %n 번으로 데이터 %s 를 보내기",
			"BTsend",
			"1",
			" ",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"bt_{0}.print({1});\n",
				"loop":""
			}
		],
		["-"],
		[
			"b",
			"BT: BT %n 번에 데이터가 들어왔는가?",
			"BTavailable",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"bt_{0}.available()",
				"loop":""
			}
		],
		[
			"r",
			"BT: BT %n 번의 데이터를 문자열로 읽기",
			"BTreadString",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"String readBTstring() {String read; for(int i = 0;i < 50; i++) {while(bt_{0}.available()){ read += (char)bt_{0}.read();}} return read;}\n",
				"work":"readBTstring()",
				"loop":""
			}
		],
		[
			"r",
			"BT: BT %n 번의 데이터를 숫자로 읽기",
			"BTreadFloat",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"String readBTstring() {String read; for(int i = 0;i < 50; i++) {while(bt_{0}.available()){ read += (char)bt_{0}.read();}} return read;}\nfloat readBTfloat(){String readData = readBTstring(); return readData.toFloat();}\n",
				"work":"readBTfloat()",
				"loop":""
			}
		],
    ["--"],
    [
      "h",
      "와이파이 모듈 블럭들",
      "WiFiHead",
      {
        "setup":"",
        "inc":"",
        "def":"",
        "work":"",
        "loop":""
      }
    ],
    [
      "w",
      "Wi-Fi x ThingSpeak: Wi-Fi %n 번을 디지털 TX %d.digitalPin 번 RX %d.digitalPin 번 핀으로 정하기",
      "createESP8266",
      "1",
      "2",
      "3",
      {
        "setup":"esp_{0}.begin(57600);\n",
        "inc":"",
        "def":"SoftwareSerial esp_{0}({1},{2});\n",
        "work":"",
        "loop":""
      }
    ],
    [
      "w",
      "Wi-Fi x ThingSpeak: Wi-Fi %n 번에 와이파이 연결하기, 이름 %s , 비번 %s",
      "initESP8266",
      "1",
      " ",
      " ",
      {
        "setup":"",
        "inc":"",
        "def":"String sendData(String command, const int timeout, boolean debug){ String response = \"\"; esp_{0}.print(command); long int time=millis(); while((time+timeout)>millis()){ while(esp_{0}.available()){ char c=esp_{0}.read(); response+=c; } } if(debug){ Serial.print(response); } return response; }\nString _SSID = {1};\nString _PSWD = {2};\n",
        "work":"sendData(\"AT+RST\\r\\n\",2000,true);\nsendData(\"AT+CWMODE=1\\r\\n\",1000,true);\nsendData(\"AT+CWJAP=\\\"\"+_SSID+\"\\\",\\\"\"+_PSWD+\"\\\"\",5000,true);\n",
        "loop":""
      }
    ],
    [
      "w",
      "Wi-Fi x ThingSpeak: ThingSpeak write API 키 설정, %s",
      "setWriteAPIkey",
      " ",
      {
        "setup":"",
        "inc":"",
        "def":"String apiKey = {0};\n",
        "work":"",
        "loop":""
      }
    ],
    [
      "w",
      "Wi-Fi x ThingSpeak: Wi-Fi %n 번으로 채널에 데이터 보내기, f1 %n , f2 %n , f3 %n , f4 %n , f5 %n , f6 %n , f7 %n , f8 %n",
      "sendDataToChannel",
      "1",
      "null",
      "null",
      "null",
      "null",
      "null",
      "null",
      "null",
      "null",
      {
        "setup":"",
        "inc":"",
        "def":"String getURL(float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8) {String URL;URL = \"GET /update?api_key=\";URL += apiKey;if(f1!=20180331) {URL +=\"&field1=\";URL += String(f1);}if(f2!=20180331) {URL +=\"&field2=\";URL += String(f2);}if(f3!=20180331) {URL +=\"&field3=\";URL += String(f3);}if(f4!=20180331) {URL +=\"&field4=\";URL += String(f4);}if(f5!=20180331) {URL +=\"&field5=\";URL += String(f5);}if(f6!=20180331) {URL +=\"&field6=\";URL += String(f6);}if(f7!=20180331) {URL +=\"&field7=\";URL += String(f7);}if(f8!=20180331) {URL +=\"&field8=\";URL += String(f8);}URL += \"\\r\\n\\r\\n\";return URL;}\nString url;\nvoid sendDataToChannel(){esp_{0}.println(\"AT+CIPSTART=\\\"TCP\\\",\\\"184.106.153.149\\\",80\");if(esp_{0}.find(\"Error\")){Serial.println(\"AT+CIPSTART error\");return;}esp_{0}.println(\"AT+CIPSEND=\"+String(url.length()));if(esp_{0}.find(\">\")) esp_{0}.print(url); else esp_{0}.println(\"AT+CIPCLOSE\");}\n",
        "work":"url = getURL({1},{2},{3},{4},{5},{6},{7},{8});\nsendDataToChannel();\n",
        "loop":""
      }
    ],
		["--"],
		[
			"h",
			"기타 유용한 블럭들",
			"EtcHead",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"",
				"loop":""
			}
		],
		[
			"r",
			"맵핑: 맵핑할 값 %n , 맵핑할 값의 범위 %n ~ %n , 결과값의 범위 %n ~ %n",
			"mapping",
			" ",
			"0",
			"1023",
			"0",
			"180",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"map({0},{1},{2},{3},{4})",
				"loop":""
			}
		],
		["-"],
		[
			"w",
			"문자열 저장: 문자열 변수 %n 번에 %s 저장",
			"SaveStr",
			" ",
			" ",
			{
				"setup":"",
				"inc":"",
				"def":"String strVar_{0};\n",
				"work":"strVar_{0} = String({1});\n",
				"loop":""
			}
		],
		[
			"r",
			"문자열 변수 %n 번",
			"LoadStr",
			" ",
			{
				"setup":"",
				"inc":"",
				"def":"",
				"work":"strVar_{0}",
				"loop":""
			}
		],
		[
			"r",
			"문자열 %s (을)를 %s (을)를 기준으로 자르고 그것에 %n 번째 가져오기",
			"SplitStr",
			" ",
			",",
			"1",
			{
				"setup":"",
				"inc":"",
				"def":"uint8_t charCount(String str, String target) { uint8_t count = 0; for(int i = 0; str[i] != \'\\0\'; i++) { if(str[i] == target[0]) count += 1; } return count; }\nString strSplit(String str, String target, uint8_t index) { uint8_t count = charCount(str, target); if(count == 0) return str; String tempStore[count+1]; uint8_t targetPos[count+2]; targetPos[count] = str.length(); uint8_t i; targetPos[0] = str.indexOf(target); for(i = 1; i < count; i++) { targetPos[i] = str.indexOf(target,targetPos[i-1]+1); } tempStore[0] = str.substring(0,targetPos[0]); for(i = 1; i < count+1; i++) { tempStore[i] = str.substring(targetPos[i-1]+1,targetPos[i]); } return tempStore[index-1]; }\n",
				"work":"strSplit({0},{1},{2})",
				"loop":""
			}
		],
		[
			"r",
			"문자열 %s (을)를 숫자로 변환",
			"convertStrToFloat",
			" ",
			{
				"setup": "",
				"inc": "",
				"def": "float StrToFloat(String str){String a = str; float b = str.toFloat(); return b;}",
				"work": "StrToFloat({0})",
				"loop": ""
			}
		]
	],
	"menus": {
		"addr":["0x20","0x27","0x3f"],
		"line":[0,1],
		"col":[0,1,2,4,6,7,8,9,10,11,12,13,14,15],
		"digitalPin":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],
		"analog":[0,1,2,3,4,5,6,7],
		"TimeField":["시","분","초"],
		"DateField":["년","월","일"],
		"power":["끄기","켜기"],
		"brightness":[1,2,3,4,5],
		"traffic":["빨간색","노란색","초록색"],
		"direction":["시계방향","반시계방향"],
		"axis":["X","Y","Z"],
		"BTmode":["슬레이브", "마스터"],
		"servovalue":["0","45","90","135","180"],
		"pwmvalue":["0","50","100","150","255"],
		"digital":["HIGH","LOW"],
		"notes":["C2","D2","E2","F2","G2","A2","B2","C3","D3","E3","F3","G3","A3","B3","C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5","C6","D6","E6","F6","G6","A6","B6","C7","D7","E7","F7","G7","A7","B7","C8","D8"],
		"beats":["Half","Quarter","Eighth","Whole","Double","Zero"]
	},
	"values":{
		"0x20": 32,"0x27": 39,"0x3f": 63,
		"시": 0,"분": 1,"초": 2,
		"년": 0,"월": 1,"일": 2,
		"끄기": 0,"켜기": 1,
		"빨간색": 0,"노란색": 1,"초록색": 2,
		"시계방향": 0,"반시계방향": 1,
		"X": 0,"Y": 1,"Z": 2,
		"슬레이브": 0,"마스터":1,
		"null":20180331,
		"HIGH":1,"LOW":0,
		"B0":31,"C1":33,"D1":37,"E1":41,"F1":44,"G1":49,"A1":55,"B1":62,
			"C2":65,"D2":73,"E2":82,"F2":87,"G2":98,"A2":110,"B2":123,
			"C3":131,"D3":147,"E3":165,"F3":175,"G3":196,"A3":220,"B3":247,
			"C4":262,"D4":294,"E4":330,"F4":349,"G4":392,"A4":440,"B4":494,
			"C5":523,"D5":587,"E5":659,"F5":698,"G5":784,"A5":880,"B5":988,
			"C6":1047,"D6":1175,"E6":1319,"F6":1397,"G6":1568,"A6":1760,"B6":1976,
			"C7":2093,"D7":2349,"E7":2637,"F7":2794,"G7":3136,"A7":3520,"B7":3951,
			"C8":4186,"D8":4699,
		"Half":500,"Quarter":250,"Eighth":125,"Whole":1000,"Double":2000,"Zero":0
	},
	"translators":{
		"zh_CN":{
			"Demo Program":"演示程序",
			"HIGH":"高电平",
			"LOW":"低电平",
			"digitalWrite( %n , %d.digital )":"数字口输出( %n ,%d.digital )",
      "blink":"闪烁"
		}
	}
}
